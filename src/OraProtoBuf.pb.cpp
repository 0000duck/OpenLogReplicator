// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OraProtoBuf.proto

#include "OraProtoBuf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_OraProtoBuf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DatumMessage_OraProtoBuf_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_OraProtoBuf_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TypeInfo_OraProtoBuf_2eproto;
namespace oraprotobuf {
class DatumMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DatumMessage> _instance;
  ::PROTOBUF_NAMESPACE_ID::int32 datum_int32_;
  ::PROTOBUF_NAMESPACE_ID::int64 datum_int64_;
  float datum_float_;
  double datum_double_;
  bool datum_bool_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datum_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datum_bytes_;
} _DatumMessage_default_instance_;
class TypeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TypeInfo> _instance;
} _TypeInfo_default_instance_;
class RowMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RowMessage> _instance;
} _RowMessage_default_instance_;
}  // namespace oraprotobuf
static void InitDefaultsscc_info_DatumMessage_OraProtoBuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::oraprotobuf::_DatumMessage_default_instance_;
    new (ptr) ::oraprotobuf::DatumMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::oraprotobuf::DatumMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DatumMessage_OraProtoBuf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DatumMessage_OraProtoBuf_2eproto}, {}};

static void InitDefaultsscc_info_RowMessage_OraProtoBuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::oraprotobuf::_RowMessage_default_instance_;
    new (ptr) ::oraprotobuf::RowMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::oraprotobuf::RowMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RowMessage_OraProtoBuf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RowMessage_OraProtoBuf_2eproto}, {
      &scc_info_DatumMessage_OraProtoBuf_2eproto.base,
      &scc_info_TypeInfo_OraProtoBuf_2eproto.base,}};

static void InitDefaultsscc_info_TypeInfo_OraProtoBuf_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::oraprotobuf::_TypeInfo_default_instance_;
    new (ptr) ::oraprotobuf::TypeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::oraprotobuf::TypeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TypeInfo_OraProtoBuf_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TypeInfo_OraProtoBuf_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_OraProtoBuf_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_OraProtoBuf_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_OraProtoBuf_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_OraProtoBuf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::oraprotobuf::DatumMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::oraprotobuf::DatumMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::oraprotobuf::DatumMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::oraprotobuf::DatumMessage, column_name_),
  PROTOBUF_FIELD_OFFSET(::oraprotobuf::DatumMessage, column_type_),
  offsetof(::oraprotobuf::DatumMessageDefaultTypeInternal, datum_int32_),
  offsetof(::oraprotobuf::DatumMessageDefaultTypeInternal, datum_int64_),
  offsetof(::oraprotobuf::DatumMessageDefaultTypeInternal, datum_float_),
  offsetof(::oraprotobuf::DatumMessageDefaultTypeInternal, datum_double_),
  offsetof(::oraprotobuf::DatumMessageDefaultTypeInternal, datum_bool_),
  offsetof(::oraprotobuf::DatumMessageDefaultTypeInternal, datum_string_),
  offsetof(::oraprotobuf::DatumMessageDefaultTypeInternal, datum_bytes_),
  PROTOBUF_FIELD_OFFSET(::oraprotobuf::DatumMessage, datum_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::oraprotobuf::TypeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::oraprotobuf::TypeInfo, modifier_),
  PROTOBUF_FIELD_OFFSET(::oraprotobuf::TypeInfo, value_optional_),
  PROTOBUF_FIELD_OFFSET(::oraprotobuf::RowMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::oraprotobuf::RowMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::oraprotobuf::RowMessage, transaction_id_),
  PROTOBUF_FIELD_OFFSET(::oraprotobuf::RowMessage, commit_time_),
  PROTOBUF_FIELD_OFFSET(::oraprotobuf::RowMessage, table_),
  PROTOBUF_FIELD_OFFSET(::oraprotobuf::RowMessage, op_),
  PROTOBUF_FIELD_OFFSET(::oraprotobuf::RowMessage, new_tuple_),
  PROTOBUF_FIELD_OFFSET(::oraprotobuf::RowMessage, old_tuple_),
  PROTOBUF_FIELD_OFFSET(::oraprotobuf::RowMessage, new_typeinfo_),
  1,
  2,
  0,
  3,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::oraprotobuf::DatumMessage)},
  { 24, -1, sizeof(::oraprotobuf::TypeInfo)},
  { 31, 43, sizeof(::oraprotobuf::RowMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::oraprotobuf::_DatumMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::oraprotobuf::_TypeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::oraprotobuf::_RowMessage_default_instance_),
};

const char descriptor_table_protodef_OraProtoBuf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021OraProtoBuf.proto\022\013oraprotobuf\"\215\002\n\014Dat"
  "umMessage\022\030\n\013column_name\030\001 \001(\tH\001\210\001\001\022\030\n\013c"
  "olumn_type\030\002 \001(\003H\002\210\001\001\022\025\n\013datum_int32\030\003 \001"
  "(\021H\000\022\025\n\013datum_int64\030\004 \001(\022H\000\022\025\n\013datum_flo"
  "at\030\005 \001(\002H\000\022\026\n\014datum_double\030\006 \001(\001H\000\022\024\n\nda"
  "tum_bool\030\007 \001(\010H\000\022\026\n\014datum_string\030\010 \001(\tH\000"
  "\022\025\n\013datum_bytes\030\t \001(\014H\000B\007\n\005datumB\016\n\014_col"
  "umn_nameB\016\n\014_column_type\"4\n\010TypeInfo\022\020\n\010"
  "modifier\030\001 \001(\t\022\026\n\016value_optional\030\002 \001(\010\"\266"
  "\002\n\nRowMessage\022\033\n\016transaction_id\030\001 \001(\006H\000\210"
  "\001\001\022\030\n\013commit_time\030\002 \001(\004H\001\210\001\001\022\022\n\005table\030\003 "
  "\001(\tH\002\210\001\001\022 \n\002op\030\004 \001(\0162\017.oraprotobuf.OpH\003\210"
  "\001\001\022,\n\tnew_tuple\030\005 \003(\0132\031.oraprotobuf.Datu"
  "mMessage\022,\n\told_tuple\030\006 \003(\0132\031.oraprotobu"
  "f.DatumMessage\022+\n\014new_typeinfo\030\007 \003(\0132\025.o"
  "raprotobuf.TypeInfoB\021\n\017_transaction_idB\016"
  "\n\014_commit_timeB\010\n\006_tableB\005\n\003_op*e\n\002Op\022\013\n"
  "\007UNKNOWN\020\000\022\n\n\006INSERT\020\001\022\n\n\006UPDATE\020\002\022\n\n\006DE"
  "LETE\020\003\022\t\n\005BEGIN\020\004\022\n\n\006COMMIT\020\005\022\007\n\003DDL\020\006\022\016"
  "\n\nCHEKCPOINT\020\007B3\n\"io.debezium.connector."
  "oracle.protoB\013OraProtoBufH\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_OraProtoBuf_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_OraProtoBuf_2eproto_sccs[3] = {
  &scc_info_DatumMessage_OraProtoBuf_2eproto.base,
  &scc_info_RowMessage_OraProtoBuf_2eproto.base,
  &scc_info_TypeInfo_OraProtoBuf_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_OraProtoBuf_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OraProtoBuf_2eproto = {
  false, false, descriptor_table_protodef_OraProtoBuf_2eproto, "OraProtoBuf.proto", 835,
  &descriptor_table_OraProtoBuf_2eproto_once, descriptor_table_OraProtoBuf_2eproto_sccs, descriptor_table_OraProtoBuf_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_OraProtoBuf_2eproto::offsets,
  file_level_metadata_OraProtoBuf_2eproto, 3, file_level_enum_descriptors_OraProtoBuf_2eproto, file_level_service_descriptors_OraProtoBuf_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_OraProtoBuf_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_OraProtoBuf_2eproto)), true);
namespace oraprotobuf {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Op_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_OraProtoBuf_2eproto);
  return file_level_enum_descriptors_OraProtoBuf_2eproto[0];
}
bool Op_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void DatumMessage::InitAsDefaultInstance() {
  ::oraprotobuf::_DatumMessage_default_instance_.datum_int32_ = 0;
  ::oraprotobuf::_DatumMessage_default_instance_.datum_int64_ = PROTOBUF_LONGLONG(0);
  ::oraprotobuf::_DatumMessage_default_instance_.datum_float_ = 0;
  ::oraprotobuf::_DatumMessage_default_instance_.datum_double_ = 0;
  ::oraprotobuf::_DatumMessage_default_instance_.datum_bool_ = false;
  ::oraprotobuf::_DatumMessage_default_instance_.datum_string_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::oraprotobuf::_DatumMessage_default_instance_.datum_bytes_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class DatumMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<DatumMessage>()._has_bits_);
  static void set_has_column_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_column_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DatumMessage::DatumMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:oraprotobuf.DatumMessage)
}
DatumMessage::DatumMessage(const DatumMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  column_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_column_name()) {
    column_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_column_name(),
      GetArena());
  }
  column_type_ = from.column_type_;
  clear_has_datum();
  switch (from.datum_case()) {
    case kDatumInt32: {
      _internal_set_datum_int32(from._internal_datum_int32());
      break;
    }
    case kDatumInt64: {
      _internal_set_datum_int64(from._internal_datum_int64());
      break;
    }
    case kDatumFloat: {
      _internal_set_datum_float(from._internal_datum_float());
      break;
    }
    case kDatumDouble: {
      _internal_set_datum_double(from._internal_datum_double());
      break;
    }
    case kDatumBool: {
      _internal_set_datum_bool(from._internal_datum_bool());
      break;
    }
    case kDatumString: {
      _internal_set_datum_string(from._internal_datum_string());
      break;
    }
    case kDatumBytes: {
      _internal_set_datum_bytes(from._internal_datum_bytes());
      break;
    }
    case DATUM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:oraprotobuf.DatumMessage)
}

void DatumMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DatumMessage_OraProtoBuf_2eproto.base);
  column_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  column_type_ = PROTOBUF_LONGLONG(0);
  clear_has_datum();
}

DatumMessage::~DatumMessage() {
  // @@protoc_insertion_point(destructor:oraprotobuf.DatumMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DatumMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  column_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_datum()) {
    clear_datum();
  }
}

void DatumMessage::ArenaDtor(void* object) {
  DatumMessage* _this = reinterpret_cast< DatumMessage* >(object);
  (void)_this;
}
void DatumMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DatumMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DatumMessage& DatumMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DatumMessage_OraProtoBuf_2eproto.base);
  return *internal_default_instance();
}


void DatumMessage::clear_datum() {
// @@protoc_insertion_point(one_of_clear_start:oraprotobuf.DatumMessage)
  switch (datum_case()) {
    case kDatumInt32: {
      // No need to clear
      break;
    }
    case kDatumInt64: {
      // No need to clear
      break;
    }
    case kDatumFloat: {
      // No need to clear
      break;
    }
    case kDatumDouble: {
      // No need to clear
      break;
    }
    case kDatumBool: {
      // No need to clear
      break;
    }
    case kDatumString: {
      datum_.datum_string_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case kDatumBytes: {
      datum_.datum_bytes_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case DATUM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATUM_NOT_SET;
}


void DatumMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:oraprotobuf.DatumMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    column_name_.ClearNonDefaultToEmpty();
  }
  column_type_ = PROTOBUF_LONGLONG(0);
  clear_datum();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DatumMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string column_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_column_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "oraprotobuf.DatumMessage.column_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 column_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_column_type(&has_bits);
          column_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 datum_int32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_datum_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 datum_int64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_datum_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float datum_float = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _internal_set_datum_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double datum_double = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _internal_set_datum_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool datum_bool = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _internal_set_datum_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string datum_string = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_datum_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "oraprotobuf.DatumMessage.datum_string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes datum_bytes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_datum_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DatumMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oraprotobuf.DatumMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string column_name = 1;
  if (_internal_has_column_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_column_name().data(), static_cast<int>(this->_internal_column_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "oraprotobuf.DatumMessage.column_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_column_name(), target);
  }

  // int64 column_type = 2;
  if (_internal_has_column_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_column_type(), target);
  }

  // sint32 datum_int32 = 3;
  if (_internal_has_datum_int32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_datum_int32(), target);
  }

  // sint64 datum_int64 = 4;
  if (_internal_has_datum_int64()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(4, this->_internal_datum_int64(), target);
  }

  // float datum_float = 5;
  if (_internal_has_datum_float()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_datum_float(), target);
  }

  // double datum_double = 6;
  if (_internal_has_datum_double()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_datum_double(), target);
  }

  // bool datum_bool = 7;
  if (_internal_has_datum_bool()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_datum_bool(), target);
  }

  // string datum_string = 8;
  if (_internal_has_datum_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_datum_string().data(), static_cast<int>(this->_internal_datum_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "oraprotobuf.DatumMessage.datum_string");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_datum_string(), target);
  }

  // bytes datum_bytes = 9;
  if (_internal_has_datum_bytes()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_datum_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oraprotobuf.DatumMessage)
  return target;
}

size_t DatumMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oraprotobuf.DatumMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // string column_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_column_name());
    }

    // int64 column_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_column_type());
    }

  }
  switch (datum_case()) {
    // sint32 datum_int32 = 3;
    case kDatumInt32: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_datum_int32());
      break;
    }
    // sint64 datum_int64 = 4;
    case kDatumInt64: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->_internal_datum_int64());
      break;
    }
    // float datum_float = 5;
    case kDatumFloat: {
      total_size += 1 + 4;
      break;
    }
    // double datum_double = 6;
    case kDatumDouble: {
      total_size += 1 + 8;
      break;
    }
    // bool datum_bool = 7;
    case kDatumBool: {
      total_size += 1 + 1;
      break;
    }
    // string datum_string = 8;
    case kDatumString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_datum_string());
      break;
    }
    // bytes datum_bytes = 9;
    case kDatumBytes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_datum_bytes());
      break;
    }
    case DATUM_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatumMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:oraprotobuf.DatumMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DatumMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DatumMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:oraprotobuf.DatumMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:oraprotobuf.DatumMessage)
    MergeFrom(*source);
  }
}

void DatumMessage::MergeFrom(const DatumMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oraprotobuf.DatumMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_column_name(from._internal_column_name());
    }
    if (cached_has_bits & 0x00000002u) {
      column_type_ = from.column_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.datum_case()) {
    case kDatumInt32: {
      _internal_set_datum_int32(from._internal_datum_int32());
      break;
    }
    case kDatumInt64: {
      _internal_set_datum_int64(from._internal_datum_int64());
      break;
    }
    case kDatumFloat: {
      _internal_set_datum_float(from._internal_datum_float());
      break;
    }
    case kDatumDouble: {
      _internal_set_datum_double(from._internal_datum_double());
      break;
    }
    case kDatumBool: {
      _internal_set_datum_bool(from._internal_datum_bool());
      break;
    }
    case kDatumString: {
      _internal_set_datum_string(from._internal_datum_string());
      break;
    }
    case kDatumBytes: {
      _internal_set_datum_bytes(from._internal_datum_bytes());
      break;
    }
    case DATUM_NOT_SET: {
      break;
    }
  }
}

void DatumMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:oraprotobuf.DatumMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatumMessage::CopyFrom(const DatumMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oraprotobuf.DatumMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatumMessage::IsInitialized() const {
  return true;
}

void DatumMessage::InternalSwap(DatumMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  column_name_.Swap(&other->column_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(column_type_, other->column_type_);
  swap(datum_, other->datum_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DatumMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TypeInfo::InitAsDefaultInstance() {
}
class TypeInfo::_Internal {
 public:
};

TypeInfo::TypeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:oraprotobuf.TypeInfo)
}
TypeInfo::TypeInfo(const TypeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  modifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_modifier().empty()) {
    modifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_modifier(),
      GetArena());
  }
  value_optional_ = from.value_optional_;
  // @@protoc_insertion_point(copy_constructor:oraprotobuf.TypeInfo)
}

void TypeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TypeInfo_OraProtoBuf_2eproto.base);
  modifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_optional_ = false;
}

TypeInfo::~TypeInfo() {
  // @@protoc_insertion_point(destructor:oraprotobuf.TypeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TypeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  modifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TypeInfo::ArenaDtor(void* object) {
  TypeInfo* _this = reinterpret_cast< TypeInfo* >(object);
  (void)_this;
}
void TypeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TypeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TypeInfo& TypeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TypeInfo_OraProtoBuf_2eproto.base);
  return *internal_default_instance();
}


void TypeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:oraprotobuf.TypeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modifier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_optional_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TypeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string modifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_modifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "oraprotobuf.TypeInfo.modifier"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool value_optional = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_optional_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TypeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oraprotobuf.TypeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string modifier = 1;
  if (this->modifier().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_modifier().data(), static_cast<int>(this->_internal_modifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "oraprotobuf.TypeInfo.modifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_modifier(), target);
  }

  // bool value_optional = 2;
  if (this->value_optional() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_value_optional(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oraprotobuf.TypeInfo)
  return target;
}

size_t TypeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oraprotobuf.TypeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string modifier = 1;
  if (this->modifier().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_modifier());
  }

  // bool value_optional = 2;
  if (this->value_optional() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TypeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:oraprotobuf.TypeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TypeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TypeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:oraprotobuf.TypeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:oraprotobuf.TypeInfo)
    MergeFrom(*source);
  }
}

void TypeInfo::MergeFrom(const TypeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oraprotobuf.TypeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.modifier().size() > 0) {
    _internal_set_modifier(from._internal_modifier());
  }
  if (from.value_optional() != 0) {
    _internal_set_value_optional(from._internal_value_optional());
  }
}

void TypeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:oraprotobuf.TypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TypeInfo::CopyFrom(const TypeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oraprotobuf.TypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeInfo::IsInitialized() const {
  return true;
}

void TypeInfo::InternalSwap(TypeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  modifier_.Swap(&other->modifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_optional_, other->value_optional_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TypeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RowMessage::InitAsDefaultInstance() {
}
class RowMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<RowMessage>()._has_bits_);
  static void set_has_transaction_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_commit_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_table(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_op(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

RowMessage::RowMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  new_tuple_(arena),
  old_tuple_(arena),
  new_typeinfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:oraprotobuf.RowMessage)
}
RowMessage::RowMessage(const RowMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      new_tuple_(from.new_tuple_),
      old_tuple_(from.old_tuple_),
      new_typeinfo_(from.new_typeinfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_table()) {
    table_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_table(),
      GetArena());
  }
  ::memcpy(&transaction_id_, &from.transaction_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&op_) -
    reinterpret_cast<char*>(&transaction_id_)) + sizeof(op_));
  // @@protoc_insertion_point(copy_constructor:oraprotobuf.RowMessage)
}

void RowMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RowMessage_OraProtoBuf_2eproto.base);
  table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&transaction_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&op_) -
      reinterpret_cast<char*>(&transaction_id_)) + sizeof(op_));
}

RowMessage::~RowMessage() {
  // @@protoc_insertion_point(destructor:oraprotobuf.RowMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RowMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  table_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RowMessage::ArenaDtor(void* object) {
  RowMessage* _this = reinterpret_cast< RowMessage* >(object);
  (void)_this;
}
void RowMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RowMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RowMessage& RowMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RowMessage_OraProtoBuf_2eproto.base);
  return *internal_default_instance();
}


void RowMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:oraprotobuf.RowMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_tuple_.Clear();
  old_tuple_.Clear();
  new_typeinfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    table_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&transaction_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&op_) -
        reinterpret_cast<char*>(&transaction_id_)) + sizeof(op_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RowMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // fixed64 transaction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_transaction_id(&has_bits);
          transaction_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // uint64 commit_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_commit_time(&has_bits);
          commit_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string table = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_table();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "oraprotobuf.RowMessage.table"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .oraprotobuf.Op op = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::oraprotobuf::Op>(val));
        } else goto handle_unusual;
        continue;
      // repeated .oraprotobuf.DatumMessage new_tuple = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_new_tuple(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .oraprotobuf.DatumMessage old_tuple = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_tuple(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .oraprotobuf.TypeInfo new_typeinfo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_new_typeinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RowMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:oraprotobuf.RowMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 transaction_id = 1;
  if (_internal_has_transaction_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_transaction_id(), target);
  }

  // uint64 commit_time = 2;
  if (_internal_has_commit_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_commit_time(), target);
  }

  // string table = 3;
  if (_internal_has_table()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table().data(), static_cast<int>(this->_internal_table().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "oraprotobuf.RowMessage.table");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_table(), target);
  }

  // .oraprotobuf.Op op = 4;
  if (_internal_has_op()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_op(), target);
  }

  // repeated .oraprotobuf.DatumMessage new_tuple = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_new_tuple_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_new_tuple(i), target, stream);
  }

  // repeated .oraprotobuf.DatumMessage old_tuple = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_old_tuple_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_old_tuple(i), target, stream);
  }

  // repeated .oraprotobuf.TypeInfo new_typeinfo = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_new_typeinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_new_typeinfo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:oraprotobuf.RowMessage)
  return target;
}

size_t RowMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:oraprotobuf.RowMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .oraprotobuf.DatumMessage new_tuple = 5;
  total_size += 1UL * this->_internal_new_tuple_size();
  for (const auto& msg : this->new_tuple_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .oraprotobuf.DatumMessage old_tuple = 6;
  total_size += 1UL * this->_internal_old_tuple_size();
  for (const auto& msg : this->old_tuple_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .oraprotobuf.TypeInfo new_typeinfo = 7;
  total_size += 1UL * this->_internal_new_typeinfo_size();
  for (const auto& msg : this->new_typeinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // string table = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_table());
    }

    // fixed64 transaction_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // uint64 commit_time = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_commit_time());
    }

    // .oraprotobuf.Op op = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RowMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:oraprotobuf.RowMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RowMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RowMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:oraprotobuf.RowMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:oraprotobuf.RowMessage)
    MergeFrom(*source);
  }
}

void RowMessage::MergeFrom(const RowMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:oraprotobuf.RowMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  new_tuple_.MergeFrom(from.new_tuple_);
  old_tuple_.MergeFrom(from.old_tuple_);
  new_typeinfo_.MergeFrom(from.new_typeinfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_table(from._internal_table());
    }
    if (cached_has_bits & 0x00000002u) {
      transaction_id_ = from.transaction_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      commit_time_ = from.commit_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      op_ = from.op_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RowMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:oraprotobuf.RowMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RowMessage::CopyFrom(const RowMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:oraprotobuf.RowMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RowMessage::IsInitialized() const {
  return true;
}

void RowMessage::InternalSwap(RowMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  new_tuple_.InternalSwap(&other->new_tuple_);
  old_tuple_.InternalSwap(&other->old_tuple_);
  new_typeinfo_.InternalSwap(&other->new_typeinfo_);
  table_.Swap(&other->table_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RowMessage, op_)
      + sizeof(RowMessage::op_)
      - PROTOBUF_FIELD_OFFSET(RowMessage, transaction_id_)>(
          reinterpret_cast<char*>(&transaction_id_),
          reinterpret_cast<char*>(&other->transaction_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RowMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace oraprotobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::oraprotobuf::DatumMessage* Arena::CreateMaybeMessage< ::oraprotobuf::DatumMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oraprotobuf::DatumMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::oraprotobuf::TypeInfo* Arena::CreateMaybeMessage< ::oraprotobuf::TypeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oraprotobuf::TypeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::oraprotobuf::RowMessage* Arena::CreateMaybeMessage< ::oraprotobuf::RowMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::oraprotobuf::RowMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
