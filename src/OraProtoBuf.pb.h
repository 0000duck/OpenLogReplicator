// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OraProtoBuf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_OraProtoBuf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_OraProtoBuf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_OraProtoBuf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_OraProtoBuf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_OraProtoBuf_2eproto;
namespace oraprotobuf {
class DatumMessage;
class DatumMessageDefaultTypeInternal;
extern DatumMessageDefaultTypeInternal _DatumMessage_default_instance_;
class RowMessage;
class RowMessageDefaultTypeInternal;
extern RowMessageDefaultTypeInternal _RowMessage_default_instance_;
class TypeInfo;
class TypeInfoDefaultTypeInternal;
extern TypeInfoDefaultTypeInternal _TypeInfo_default_instance_;
}  // namespace oraprotobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::oraprotobuf::DatumMessage* Arena::CreateMaybeMessage<::oraprotobuf::DatumMessage>(Arena*);
template<> ::oraprotobuf::RowMessage* Arena::CreateMaybeMessage<::oraprotobuf::RowMessage>(Arena*);
template<> ::oraprotobuf::TypeInfo* Arena::CreateMaybeMessage<::oraprotobuf::TypeInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace oraprotobuf {

enum Op : int {
  UNKNOWN = 0,
  INSERT = 1,
  UPDATE = 2,
  DELETE = 3,
  BEGIN = 4,
  COMMIT = 5,
  DDL = 6,
  CHEKCPOINT = 7,
  Op_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Op_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Op_IsValid(int value);
constexpr Op Op_MIN = UNKNOWN;
constexpr Op Op_MAX = CHEKCPOINT;
constexpr int Op_ARRAYSIZE = Op_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Op_descriptor();
template<typename T>
inline const std::string& Op_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Op>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Op_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Op_descriptor(), enum_t_value);
}
inline bool Op_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Op* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Op>(
    Op_descriptor(), name, value);
}
// ===================================================================

class DatumMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oraprotobuf.DatumMessage) */ {
 public:
  inline DatumMessage() : DatumMessage(nullptr) {}
  virtual ~DatumMessage();

  DatumMessage(const DatumMessage& from);
  DatumMessage(DatumMessage&& from) noexcept
    : DatumMessage() {
    *this = ::std::move(from);
  }

  inline DatumMessage& operator=(const DatumMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DatumMessage& operator=(DatumMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DatumMessage& default_instance();

  enum DatumCase {
    kDatumInt32 = 3,
    kDatumInt64 = 4,
    kDatumFloat = 5,
    kDatumDouble = 6,
    kDatumBool = 7,
    kDatumString = 8,
    kDatumBytes = 9,
    DATUM_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DatumMessage* internal_default_instance() {
    return reinterpret_cast<const DatumMessage*>(
               &_DatumMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DatumMessage& a, DatumMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DatumMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DatumMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DatumMessage* New() const final {
    return CreateMaybeMessage<DatumMessage>(nullptr);
  }

  DatumMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DatumMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DatumMessage& from);
  void MergeFrom(const DatumMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DatumMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oraprotobuf.DatumMessage";
  }
  protected:
  explicit DatumMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OraProtoBuf_2eproto);
    return ::descriptor_table_OraProtoBuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnNameFieldNumber = 1,
    kColumnTypeFieldNumber = 2,
    kDatumInt32FieldNumber = 3,
    kDatumInt64FieldNumber = 4,
    kDatumFloatFieldNumber = 5,
    kDatumDoubleFieldNumber = 6,
    kDatumBoolFieldNumber = 7,
    kDatumStringFieldNumber = 8,
    kDatumBytesFieldNumber = 9,
  };
  // string column_name = 1;
  bool has_column_name() const;
  private:
  bool _internal_has_column_name() const;
  public:
  void clear_column_name();
  const std::string& column_name() const;
  void set_column_name(const std::string& value);
  void set_column_name(std::string&& value);
  void set_column_name(const char* value);
  void set_column_name(const char* value, size_t size);
  std::string* mutable_column_name();
  std::string* release_column_name();
  void set_allocated_column_name(std::string* column_name);
  private:
  const std::string& _internal_column_name() const;
  void _internal_set_column_name(const std::string& value);
  std::string* _internal_mutable_column_name();
  public:

  // int64 column_type = 2;
  bool has_column_type() const;
  private:
  bool _internal_has_column_type() const;
  public:
  void clear_column_type();
  ::PROTOBUF_NAMESPACE_ID::int64 column_type() const;
  void set_column_type(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_column_type() const;
  void _internal_set_column_type(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // sint32 datum_int32 = 3;
  private:
  bool _internal_has_datum_int32() const;
  public:
  void clear_datum_int32();
  ::PROTOBUF_NAMESPACE_ID::int32 datum_int32() const;
  void set_datum_int32(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_datum_int32() const;
  void _internal_set_datum_int32(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint64 datum_int64 = 4;
  private:
  bool _internal_has_datum_int64() const;
  public:
  void clear_datum_int64();
  ::PROTOBUF_NAMESPACE_ID::int64 datum_int64() const;
  void set_datum_int64(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_datum_int64() const;
  void _internal_set_datum_int64(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // float datum_float = 5;
  private:
  bool _internal_has_datum_float() const;
  public:
  void clear_datum_float();
  float datum_float() const;
  void set_datum_float(float value);
  private:
  float _internal_datum_float() const;
  void _internal_set_datum_float(float value);
  public:

  // double datum_double = 6;
  private:
  bool _internal_has_datum_double() const;
  public:
  void clear_datum_double();
  double datum_double() const;
  void set_datum_double(double value);
  private:
  double _internal_datum_double() const;
  void _internal_set_datum_double(double value);
  public:

  // bool datum_bool = 7;
  private:
  bool _internal_has_datum_bool() const;
  public:
  void clear_datum_bool();
  bool datum_bool() const;
  void set_datum_bool(bool value);
  private:
  bool _internal_datum_bool() const;
  void _internal_set_datum_bool(bool value);
  public:

  // string datum_string = 8;
  private:
  bool _internal_has_datum_string() const;
  public:
  void clear_datum_string();
  const std::string& datum_string() const;
  void set_datum_string(const std::string& value);
  void set_datum_string(std::string&& value);
  void set_datum_string(const char* value);
  void set_datum_string(const char* value, size_t size);
  std::string* mutable_datum_string();
  std::string* release_datum_string();
  void set_allocated_datum_string(std::string* datum_string);
  private:
  const std::string& _internal_datum_string() const;
  void _internal_set_datum_string(const std::string& value);
  std::string* _internal_mutable_datum_string();
  public:

  // bytes datum_bytes = 9;
  private:
  bool _internal_has_datum_bytes() const;
  public:
  void clear_datum_bytes();
  const std::string& datum_bytes() const;
  void set_datum_bytes(const std::string& value);
  void set_datum_bytes(std::string&& value);
  void set_datum_bytes(const char* value);
  void set_datum_bytes(const void* value, size_t size);
  std::string* mutable_datum_bytes();
  std::string* release_datum_bytes();
  void set_allocated_datum_bytes(std::string* datum_bytes);
  private:
  const std::string& _internal_datum_bytes() const;
  void _internal_set_datum_bytes(const std::string& value);
  std::string* _internal_mutable_datum_bytes();
  public:

  void clear_datum();
  DatumCase datum_case() const;
  // @@protoc_insertion_point(class_scope:oraprotobuf.DatumMessage)
 private:
  class _Internal;
  void set_has_datum_int32();
  void set_has_datum_int64();
  void set_has_datum_float();
  void set_has_datum_double();
  void set_has_datum_bool();
  void set_has_datum_string();
  void set_has_datum_bytes();

  inline bool has_datum() const;
  inline void clear_has_datum();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr column_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 column_type_;
  union DatumUnion {
    DatumUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 datum_int32_;
    ::PROTOBUF_NAMESPACE_ID::int64 datum_int64_;
    float datum_float_;
    double datum_double_;
    bool datum_bool_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datum_string_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datum_bytes_;
  } datum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_OraProtoBuf_2eproto;
};
// -------------------------------------------------------------------

class TypeInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oraprotobuf.TypeInfo) */ {
 public:
  inline TypeInfo() : TypeInfo(nullptr) {}
  virtual ~TypeInfo();

  TypeInfo(const TypeInfo& from);
  TypeInfo(TypeInfo&& from) noexcept
    : TypeInfo() {
    *this = ::std::move(from);
  }

  inline TypeInfo& operator=(const TypeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TypeInfo& operator=(TypeInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TypeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TypeInfo* internal_default_instance() {
    return reinterpret_cast<const TypeInfo*>(
               &_TypeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TypeInfo& a, TypeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TypeInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TypeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TypeInfo* New() const final {
    return CreateMaybeMessage<TypeInfo>(nullptr);
  }

  TypeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TypeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TypeInfo& from);
  void MergeFrom(const TypeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TypeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oraprotobuf.TypeInfo";
  }
  protected:
  explicit TypeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OraProtoBuf_2eproto);
    return ::descriptor_table_OraProtoBuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModifierFieldNumber = 1,
    kValueOptionalFieldNumber = 2,
  };
  // string modifier = 1;
  void clear_modifier();
  const std::string& modifier() const;
  void set_modifier(const std::string& value);
  void set_modifier(std::string&& value);
  void set_modifier(const char* value);
  void set_modifier(const char* value, size_t size);
  std::string* mutable_modifier();
  std::string* release_modifier();
  void set_allocated_modifier(std::string* modifier);
  private:
  const std::string& _internal_modifier() const;
  void _internal_set_modifier(const std::string& value);
  std::string* _internal_mutable_modifier();
  public:

  // bool value_optional = 2;
  void clear_value_optional();
  bool value_optional() const;
  void set_value_optional(bool value);
  private:
  bool _internal_value_optional() const;
  void _internal_set_value_optional(bool value);
  public:

  // @@protoc_insertion_point(class_scope:oraprotobuf.TypeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modifier_;
  bool value_optional_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_OraProtoBuf_2eproto;
};
// -------------------------------------------------------------------

class RowMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oraprotobuf.RowMessage) */ {
 public:
  inline RowMessage() : RowMessage(nullptr) {}
  virtual ~RowMessage();

  RowMessage(const RowMessage& from);
  RowMessage(RowMessage&& from) noexcept
    : RowMessage() {
    *this = ::std::move(from);
  }

  inline RowMessage& operator=(const RowMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RowMessage& operator=(RowMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RowMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RowMessage* internal_default_instance() {
    return reinterpret_cast<const RowMessage*>(
               &_RowMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RowMessage& a, RowMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RowMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RowMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RowMessage* New() const final {
    return CreateMaybeMessage<RowMessage>(nullptr);
  }

  RowMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RowMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RowMessage& from);
  void MergeFrom(const RowMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RowMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oraprotobuf.RowMessage";
  }
  protected:
  explicit RowMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_OraProtoBuf_2eproto);
    return ::descriptor_table_OraProtoBuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewTupleFieldNumber = 5,
    kOldTupleFieldNumber = 6,
    kNewTypeinfoFieldNumber = 7,
    kTableFieldNumber = 3,
    kTransactionIdFieldNumber = 1,
    kCommitTimeFieldNumber = 2,
    kOpFieldNumber = 4,
  };
  // repeated .oraprotobuf.DatumMessage new_tuple = 5;
  int new_tuple_size() const;
  private:
  int _internal_new_tuple_size() const;
  public:
  void clear_new_tuple();
  ::oraprotobuf::DatumMessage* mutable_new_tuple(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oraprotobuf::DatumMessage >*
      mutable_new_tuple();
  private:
  const ::oraprotobuf::DatumMessage& _internal_new_tuple(int index) const;
  ::oraprotobuf::DatumMessage* _internal_add_new_tuple();
  public:
  const ::oraprotobuf::DatumMessage& new_tuple(int index) const;
  ::oraprotobuf::DatumMessage* add_new_tuple();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oraprotobuf::DatumMessage >&
      new_tuple() const;

  // repeated .oraprotobuf.DatumMessage old_tuple = 6;
  int old_tuple_size() const;
  private:
  int _internal_old_tuple_size() const;
  public:
  void clear_old_tuple();
  ::oraprotobuf::DatumMessage* mutable_old_tuple(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oraprotobuf::DatumMessage >*
      mutable_old_tuple();
  private:
  const ::oraprotobuf::DatumMessage& _internal_old_tuple(int index) const;
  ::oraprotobuf::DatumMessage* _internal_add_old_tuple();
  public:
  const ::oraprotobuf::DatumMessage& old_tuple(int index) const;
  ::oraprotobuf::DatumMessage* add_old_tuple();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oraprotobuf::DatumMessage >&
      old_tuple() const;

  // repeated .oraprotobuf.TypeInfo new_typeinfo = 7;
  int new_typeinfo_size() const;
  private:
  int _internal_new_typeinfo_size() const;
  public:
  void clear_new_typeinfo();
  ::oraprotobuf::TypeInfo* mutable_new_typeinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oraprotobuf::TypeInfo >*
      mutable_new_typeinfo();
  private:
  const ::oraprotobuf::TypeInfo& _internal_new_typeinfo(int index) const;
  ::oraprotobuf::TypeInfo* _internal_add_new_typeinfo();
  public:
  const ::oraprotobuf::TypeInfo& new_typeinfo(int index) const;
  ::oraprotobuf::TypeInfo* add_new_typeinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oraprotobuf::TypeInfo >&
      new_typeinfo() const;

  // string table = 3;
  bool has_table() const;
  private:
  bool _internal_has_table() const;
  public:
  void clear_table();
  const std::string& table() const;
  void set_table(const std::string& value);
  void set_table(std::string&& value);
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  std::string* mutable_table();
  std::string* release_table();
  void set_allocated_table(std::string* table);
  private:
  const std::string& _internal_table() const;
  void _internal_set_table(const std::string& value);
  std::string* _internal_mutable_table();
  public:

  // fixed64 transaction_id = 1;
  bool has_transaction_id() const;
  private:
  bool _internal_has_transaction_id() const;
  public:
  void clear_transaction_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 transaction_id() const;
  void set_transaction_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_transaction_id() const;
  void _internal_set_transaction_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 commit_time = 2;
  bool has_commit_time() const;
  private:
  bool _internal_has_commit_time() const;
  public:
  void clear_commit_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_time() const;
  void set_commit_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_commit_time() const;
  void _internal_set_commit_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .oraprotobuf.Op op = 4;
  bool has_op() const;
  private:
  bool _internal_has_op() const;
  public:
  void clear_op();
  ::oraprotobuf::Op op() const;
  void set_op(::oraprotobuf::Op value);
  private:
  ::oraprotobuf::Op _internal_op() const;
  void _internal_set_op(::oraprotobuf::Op value);
  public:

  // @@protoc_insertion_point(class_scope:oraprotobuf.RowMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oraprotobuf::DatumMessage > new_tuple_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oraprotobuf::DatumMessage > old_tuple_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oraprotobuf::TypeInfo > new_typeinfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_;
  ::PROTOBUF_NAMESPACE_ID::uint64 transaction_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 commit_time_;
  int op_;
  friend struct ::TableStruct_OraProtoBuf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DatumMessage

// string column_name = 1;
inline bool DatumMessage::_internal_has_column_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DatumMessage::has_column_name() const {
  return _internal_has_column_name();
}
inline void DatumMessage::clear_column_name() {
  column_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DatumMessage::column_name() const {
  // @@protoc_insertion_point(field_get:oraprotobuf.DatumMessage.column_name)
  return _internal_column_name();
}
inline void DatumMessage::set_column_name(const std::string& value) {
  _internal_set_column_name(value);
  // @@protoc_insertion_point(field_set:oraprotobuf.DatumMessage.column_name)
}
inline std::string* DatumMessage::mutable_column_name() {
  // @@protoc_insertion_point(field_mutable:oraprotobuf.DatumMessage.column_name)
  return _internal_mutable_column_name();
}
inline const std::string& DatumMessage::_internal_column_name() const {
  return column_name_.Get();
}
inline void DatumMessage::_internal_set_column_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  column_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DatumMessage::set_column_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  column_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:oraprotobuf.DatumMessage.column_name)
}
inline void DatumMessage::set_column_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  column_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:oraprotobuf.DatumMessage.column_name)
}
inline void DatumMessage::set_column_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  column_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:oraprotobuf.DatumMessage.column_name)
}
inline std::string* DatumMessage::_internal_mutable_column_name() {
  _has_bits_[0] |= 0x00000001u;
  return column_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DatumMessage::release_column_name() {
  // @@protoc_insertion_point(field_release:oraprotobuf.DatumMessage.column_name)
  if (!_internal_has_column_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return column_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DatumMessage::set_allocated_column_name(std::string* column_name) {
  if (column_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  column_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), column_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:oraprotobuf.DatumMessage.column_name)
}

// int64 column_type = 2;
inline bool DatumMessage::_internal_has_column_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DatumMessage::has_column_type() const {
  return _internal_has_column_type();
}
inline void DatumMessage::clear_column_type() {
  column_type_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DatumMessage::_internal_column_type() const {
  return column_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DatumMessage::column_type() const {
  // @@protoc_insertion_point(field_get:oraprotobuf.DatumMessage.column_type)
  return _internal_column_type();
}
inline void DatumMessage::_internal_set_column_type(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  column_type_ = value;
}
inline void DatumMessage::set_column_type(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_column_type(value);
  // @@protoc_insertion_point(field_set:oraprotobuf.DatumMessage.column_type)
}

// sint32 datum_int32 = 3;
inline bool DatumMessage::_internal_has_datum_int32() const {
  return datum_case() == kDatumInt32;
}
inline void DatumMessage::set_has_datum_int32() {
  _oneof_case_[0] = kDatumInt32;
}
inline void DatumMessage::clear_datum_int32() {
  if (_internal_has_datum_int32()) {
    datum_.datum_int32_ = 0;
    clear_has_datum();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DatumMessage::_internal_datum_int32() const {
  if (_internal_has_datum_int32()) {
    return datum_.datum_int32_;
  }
  return 0;
}
inline void DatumMessage::_internal_set_datum_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_datum_int32()) {
    clear_datum();
    set_has_datum_int32();
  }
  datum_.datum_int32_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DatumMessage::datum_int32() const {
  // @@protoc_insertion_point(field_get:oraprotobuf.DatumMessage.datum_int32)
  return _internal_datum_int32();
}
inline void DatumMessage::set_datum_int32(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_datum_int32(value);
  // @@protoc_insertion_point(field_set:oraprotobuf.DatumMessage.datum_int32)
}

// sint64 datum_int64 = 4;
inline bool DatumMessage::_internal_has_datum_int64() const {
  return datum_case() == kDatumInt64;
}
inline void DatumMessage::set_has_datum_int64() {
  _oneof_case_[0] = kDatumInt64;
}
inline void DatumMessage::clear_datum_int64() {
  if (_internal_has_datum_int64()) {
    datum_.datum_int64_ = PROTOBUF_LONGLONG(0);
    clear_has_datum();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DatumMessage::_internal_datum_int64() const {
  if (_internal_has_datum_int64()) {
    return datum_.datum_int64_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void DatumMessage::_internal_set_datum_int64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_datum_int64()) {
    clear_datum();
    set_has_datum_int64();
  }
  datum_.datum_int64_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DatumMessage::datum_int64() const {
  // @@protoc_insertion_point(field_get:oraprotobuf.DatumMessage.datum_int64)
  return _internal_datum_int64();
}
inline void DatumMessage::set_datum_int64(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_datum_int64(value);
  // @@protoc_insertion_point(field_set:oraprotobuf.DatumMessage.datum_int64)
}

// float datum_float = 5;
inline bool DatumMessage::_internal_has_datum_float() const {
  return datum_case() == kDatumFloat;
}
inline void DatumMessage::set_has_datum_float() {
  _oneof_case_[0] = kDatumFloat;
}
inline void DatumMessage::clear_datum_float() {
  if (_internal_has_datum_float()) {
    datum_.datum_float_ = 0;
    clear_has_datum();
  }
}
inline float DatumMessage::_internal_datum_float() const {
  if (_internal_has_datum_float()) {
    return datum_.datum_float_;
  }
  return 0;
}
inline void DatumMessage::_internal_set_datum_float(float value) {
  if (!_internal_has_datum_float()) {
    clear_datum();
    set_has_datum_float();
  }
  datum_.datum_float_ = value;
}
inline float DatumMessage::datum_float() const {
  // @@protoc_insertion_point(field_get:oraprotobuf.DatumMessage.datum_float)
  return _internal_datum_float();
}
inline void DatumMessage::set_datum_float(float value) {
  _internal_set_datum_float(value);
  // @@protoc_insertion_point(field_set:oraprotobuf.DatumMessage.datum_float)
}

// double datum_double = 6;
inline bool DatumMessage::_internal_has_datum_double() const {
  return datum_case() == kDatumDouble;
}
inline void DatumMessage::set_has_datum_double() {
  _oneof_case_[0] = kDatumDouble;
}
inline void DatumMessage::clear_datum_double() {
  if (_internal_has_datum_double()) {
    datum_.datum_double_ = 0;
    clear_has_datum();
  }
}
inline double DatumMessage::_internal_datum_double() const {
  if (_internal_has_datum_double()) {
    return datum_.datum_double_;
  }
  return 0;
}
inline void DatumMessage::_internal_set_datum_double(double value) {
  if (!_internal_has_datum_double()) {
    clear_datum();
    set_has_datum_double();
  }
  datum_.datum_double_ = value;
}
inline double DatumMessage::datum_double() const {
  // @@protoc_insertion_point(field_get:oraprotobuf.DatumMessage.datum_double)
  return _internal_datum_double();
}
inline void DatumMessage::set_datum_double(double value) {
  _internal_set_datum_double(value);
  // @@protoc_insertion_point(field_set:oraprotobuf.DatumMessage.datum_double)
}

// bool datum_bool = 7;
inline bool DatumMessage::_internal_has_datum_bool() const {
  return datum_case() == kDatumBool;
}
inline void DatumMessage::set_has_datum_bool() {
  _oneof_case_[0] = kDatumBool;
}
inline void DatumMessage::clear_datum_bool() {
  if (_internal_has_datum_bool()) {
    datum_.datum_bool_ = false;
    clear_has_datum();
  }
}
inline bool DatumMessage::_internal_datum_bool() const {
  if (_internal_has_datum_bool()) {
    return datum_.datum_bool_;
  }
  return false;
}
inline void DatumMessage::_internal_set_datum_bool(bool value) {
  if (!_internal_has_datum_bool()) {
    clear_datum();
    set_has_datum_bool();
  }
  datum_.datum_bool_ = value;
}
inline bool DatumMessage::datum_bool() const {
  // @@protoc_insertion_point(field_get:oraprotobuf.DatumMessage.datum_bool)
  return _internal_datum_bool();
}
inline void DatumMessage::set_datum_bool(bool value) {
  _internal_set_datum_bool(value);
  // @@protoc_insertion_point(field_set:oraprotobuf.DatumMessage.datum_bool)
}

// string datum_string = 8;
inline bool DatumMessage::_internal_has_datum_string() const {
  return datum_case() == kDatumString;
}
inline void DatumMessage::set_has_datum_string() {
  _oneof_case_[0] = kDatumString;
}
inline void DatumMessage::clear_datum_string() {
  if (_internal_has_datum_string()) {
    datum_.datum_string_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_datum();
  }
}
inline const std::string& DatumMessage::datum_string() const {
  // @@protoc_insertion_point(field_get:oraprotobuf.DatumMessage.datum_string)
  return _internal_datum_string();
}
inline void DatumMessage::set_datum_string(const std::string& value) {
  _internal_set_datum_string(value);
  // @@protoc_insertion_point(field_set:oraprotobuf.DatumMessage.datum_string)
}
inline std::string* DatumMessage::mutable_datum_string() {
  // @@protoc_insertion_point(field_mutable:oraprotobuf.DatumMessage.datum_string)
  return _internal_mutable_datum_string();
}
inline const std::string& DatumMessage::_internal_datum_string() const {
  if (_internal_has_datum_string()) {
    return datum_.datum_string_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void DatumMessage::_internal_set_datum_string(const std::string& value) {
  if (!_internal_has_datum_string()) {
    clear_datum();
    set_has_datum_string();
    datum_.datum_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  datum_.datum_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DatumMessage::set_datum_string(std::string&& value) {
  // @@protoc_insertion_point(field_set:oraprotobuf.DatumMessage.datum_string)
  if (!_internal_has_datum_string()) {
    clear_datum();
    set_has_datum_string();
    datum_.datum_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  datum_.datum_string_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:oraprotobuf.DatumMessage.datum_string)
}
inline void DatumMessage::set_datum_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_datum_string()) {
    clear_datum();
    set_has_datum_string();
    datum_.datum_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  datum_.datum_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:oraprotobuf.DatumMessage.datum_string)
}
inline void DatumMessage::set_datum_string(const char* value,
                             size_t size) {
  if (!_internal_has_datum_string()) {
    clear_datum();
    set_has_datum_string();
    datum_.datum_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  datum_.datum_string_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:oraprotobuf.DatumMessage.datum_string)
}
inline std::string* DatumMessage::_internal_mutable_datum_string() {
  if (!_internal_has_datum_string()) {
    clear_datum();
    set_has_datum_string();
    datum_.datum_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return datum_.datum_string_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DatumMessage::release_datum_string() {
  // @@protoc_insertion_point(field_release:oraprotobuf.DatumMessage.datum_string)
  if (_internal_has_datum_string()) {
    clear_has_datum();
    return datum_.datum_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void DatumMessage::set_allocated_datum_string(std::string* datum_string) {
  if (has_datum()) {
    clear_datum();
  }
  if (datum_string != nullptr) {
    set_has_datum_string();
    datum_.datum_string_.UnsafeSetDefault(datum_string);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(datum_string);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:oraprotobuf.DatumMessage.datum_string)
}

// bytes datum_bytes = 9;
inline bool DatumMessage::_internal_has_datum_bytes() const {
  return datum_case() == kDatumBytes;
}
inline void DatumMessage::set_has_datum_bytes() {
  _oneof_case_[0] = kDatumBytes;
}
inline void DatumMessage::clear_datum_bytes() {
  if (_internal_has_datum_bytes()) {
    datum_.datum_bytes_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_datum();
  }
}
inline const std::string& DatumMessage::datum_bytes() const {
  // @@protoc_insertion_point(field_get:oraprotobuf.DatumMessage.datum_bytes)
  return _internal_datum_bytes();
}
inline void DatumMessage::set_datum_bytes(const std::string& value) {
  _internal_set_datum_bytes(value);
  // @@protoc_insertion_point(field_set:oraprotobuf.DatumMessage.datum_bytes)
}
inline std::string* DatumMessage::mutable_datum_bytes() {
  // @@protoc_insertion_point(field_mutable:oraprotobuf.DatumMessage.datum_bytes)
  return _internal_mutable_datum_bytes();
}
inline const std::string& DatumMessage::_internal_datum_bytes() const {
  if (_internal_has_datum_bytes()) {
    return datum_.datum_bytes_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void DatumMessage::_internal_set_datum_bytes(const std::string& value) {
  if (!_internal_has_datum_bytes()) {
    clear_datum();
    set_has_datum_bytes();
    datum_.datum_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  datum_.datum_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DatumMessage::set_datum_bytes(std::string&& value) {
  // @@protoc_insertion_point(field_set:oraprotobuf.DatumMessage.datum_bytes)
  if (!_internal_has_datum_bytes()) {
    clear_datum();
    set_has_datum_bytes();
    datum_.datum_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  datum_.datum_bytes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:oraprotobuf.DatumMessage.datum_bytes)
}
inline void DatumMessage::set_datum_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_datum_bytes()) {
    clear_datum();
    set_has_datum_bytes();
    datum_.datum_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  datum_.datum_bytes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:oraprotobuf.DatumMessage.datum_bytes)
}
inline void DatumMessage::set_datum_bytes(const void* value,
                             size_t size) {
  if (!_internal_has_datum_bytes()) {
    clear_datum();
    set_has_datum_bytes();
    datum_.datum_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  datum_.datum_bytes_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:oraprotobuf.DatumMessage.datum_bytes)
}
inline std::string* DatumMessage::_internal_mutable_datum_bytes() {
  if (!_internal_has_datum_bytes()) {
    clear_datum();
    set_has_datum_bytes();
    datum_.datum_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return datum_.datum_bytes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DatumMessage::release_datum_bytes() {
  // @@protoc_insertion_point(field_release:oraprotobuf.DatumMessage.datum_bytes)
  if (_internal_has_datum_bytes()) {
    clear_has_datum();
    return datum_.datum_bytes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void DatumMessage::set_allocated_datum_bytes(std::string* datum_bytes) {
  if (has_datum()) {
    clear_datum();
  }
  if (datum_bytes != nullptr) {
    set_has_datum_bytes();
    datum_.datum_bytes_.UnsafeSetDefault(datum_bytes);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(datum_bytes);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:oraprotobuf.DatumMessage.datum_bytes)
}

inline bool DatumMessage::has_datum() const {
  return datum_case() != DATUM_NOT_SET;
}
inline void DatumMessage::clear_has_datum() {
  _oneof_case_[0] = DATUM_NOT_SET;
}
inline DatumMessage::DatumCase DatumMessage::datum_case() const {
  return DatumMessage::DatumCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TypeInfo

// string modifier = 1;
inline void TypeInfo::clear_modifier() {
  modifier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TypeInfo::modifier() const {
  // @@protoc_insertion_point(field_get:oraprotobuf.TypeInfo.modifier)
  return _internal_modifier();
}
inline void TypeInfo::set_modifier(const std::string& value) {
  _internal_set_modifier(value);
  // @@protoc_insertion_point(field_set:oraprotobuf.TypeInfo.modifier)
}
inline std::string* TypeInfo::mutable_modifier() {
  // @@protoc_insertion_point(field_mutable:oraprotobuf.TypeInfo.modifier)
  return _internal_mutable_modifier();
}
inline const std::string& TypeInfo::_internal_modifier() const {
  return modifier_.Get();
}
inline void TypeInfo::_internal_set_modifier(const std::string& value) {
  
  modifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TypeInfo::set_modifier(std::string&& value) {
  
  modifier_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:oraprotobuf.TypeInfo.modifier)
}
inline void TypeInfo::set_modifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  modifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:oraprotobuf.TypeInfo.modifier)
}
inline void TypeInfo::set_modifier(const char* value,
    size_t size) {
  
  modifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:oraprotobuf.TypeInfo.modifier)
}
inline std::string* TypeInfo::_internal_mutable_modifier() {
  
  return modifier_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TypeInfo::release_modifier() {
  // @@protoc_insertion_point(field_release:oraprotobuf.TypeInfo.modifier)
  return modifier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TypeInfo::set_allocated_modifier(std::string* modifier) {
  if (modifier != nullptr) {
    
  } else {
    
  }
  modifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:oraprotobuf.TypeInfo.modifier)
}

// bool value_optional = 2;
inline void TypeInfo::clear_value_optional() {
  value_optional_ = false;
}
inline bool TypeInfo::_internal_value_optional() const {
  return value_optional_;
}
inline bool TypeInfo::value_optional() const {
  // @@protoc_insertion_point(field_get:oraprotobuf.TypeInfo.value_optional)
  return _internal_value_optional();
}
inline void TypeInfo::_internal_set_value_optional(bool value) {
  
  value_optional_ = value;
}
inline void TypeInfo::set_value_optional(bool value) {
  _internal_set_value_optional(value);
  // @@protoc_insertion_point(field_set:oraprotobuf.TypeInfo.value_optional)
}

// -------------------------------------------------------------------

// RowMessage

// fixed64 transaction_id = 1;
inline bool RowMessage::_internal_has_transaction_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RowMessage::has_transaction_id() const {
  return _internal_has_transaction_id();
}
inline void RowMessage::clear_transaction_id() {
  transaction_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RowMessage::_internal_transaction_id() const {
  return transaction_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RowMessage::transaction_id() const {
  // @@protoc_insertion_point(field_get:oraprotobuf.RowMessage.transaction_id)
  return _internal_transaction_id();
}
inline void RowMessage::_internal_set_transaction_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  transaction_id_ = value;
}
inline void RowMessage::set_transaction_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_transaction_id(value);
  // @@protoc_insertion_point(field_set:oraprotobuf.RowMessage.transaction_id)
}

// uint64 commit_time = 2;
inline bool RowMessage::_internal_has_commit_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RowMessage::has_commit_time() const {
  return _internal_has_commit_time();
}
inline void RowMessage::clear_commit_time() {
  commit_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RowMessage::_internal_commit_time() const {
  return commit_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RowMessage::commit_time() const {
  // @@protoc_insertion_point(field_get:oraprotobuf.RowMessage.commit_time)
  return _internal_commit_time();
}
inline void RowMessage::_internal_set_commit_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  commit_time_ = value;
}
inline void RowMessage::set_commit_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_commit_time(value);
  // @@protoc_insertion_point(field_set:oraprotobuf.RowMessage.commit_time)
}

// string table = 3;
inline bool RowMessage::_internal_has_table() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RowMessage::has_table() const {
  return _internal_has_table();
}
inline void RowMessage::clear_table() {
  table_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RowMessage::table() const {
  // @@protoc_insertion_point(field_get:oraprotobuf.RowMessage.table)
  return _internal_table();
}
inline void RowMessage::set_table(const std::string& value) {
  _internal_set_table(value);
  // @@protoc_insertion_point(field_set:oraprotobuf.RowMessage.table)
}
inline std::string* RowMessage::mutable_table() {
  // @@protoc_insertion_point(field_mutable:oraprotobuf.RowMessage.table)
  return _internal_mutable_table();
}
inline const std::string& RowMessage::_internal_table() const {
  return table_.Get();
}
inline void RowMessage::_internal_set_table(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  table_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RowMessage::set_table(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  table_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:oraprotobuf.RowMessage.table)
}
inline void RowMessage::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  table_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:oraprotobuf.RowMessage.table)
}
inline void RowMessage::set_table(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  table_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:oraprotobuf.RowMessage.table)
}
inline std::string* RowMessage::_internal_mutable_table() {
  _has_bits_[0] |= 0x00000001u;
  return table_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RowMessage::release_table() {
  // @@protoc_insertion_point(field_release:oraprotobuf.RowMessage.table)
  if (!_internal_has_table()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return table_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RowMessage::set_allocated_table(std::string* table) {
  if (table != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  table_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:oraprotobuf.RowMessage.table)
}

// .oraprotobuf.Op op = 4;
inline bool RowMessage::_internal_has_op() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RowMessage::has_op() const {
  return _internal_has_op();
}
inline void RowMessage::clear_op() {
  op_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::oraprotobuf::Op RowMessage::_internal_op() const {
  return static_cast< ::oraprotobuf::Op >(op_);
}
inline ::oraprotobuf::Op RowMessage::op() const {
  // @@protoc_insertion_point(field_get:oraprotobuf.RowMessage.op)
  return _internal_op();
}
inline void RowMessage::_internal_set_op(::oraprotobuf::Op value) {
  _has_bits_[0] |= 0x00000008u;
  op_ = value;
}
inline void RowMessage::set_op(::oraprotobuf::Op value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:oraprotobuf.RowMessage.op)
}

// repeated .oraprotobuf.DatumMessage new_tuple = 5;
inline int RowMessage::_internal_new_tuple_size() const {
  return new_tuple_.size();
}
inline int RowMessage::new_tuple_size() const {
  return _internal_new_tuple_size();
}
inline void RowMessage::clear_new_tuple() {
  new_tuple_.Clear();
}
inline ::oraprotobuf::DatumMessage* RowMessage::mutable_new_tuple(int index) {
  // @@protoc_insertion_point(field_mutable:oraprotobuf.RowMessage.new_tuple)
  return new_tuple_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oraprotobuf::DatumMessage >*
RowMessage::mutable_new_tuple() {
  // @@protoc_insertion_point(field_mutable_list:oraprotobuf.RowMessage.new_tuple)
  return &new_tuple_;
}
inline const ::oraprotobuf::DatumMessage& RowMessage::_internal_new_tuple(int index) const {
  return new_tuple_.Get(index);
}
inline const ::oraprotobuf::DatumMessage& RowMessage::new_tuple(int index) const {
  // @@protoc_insertion_point(field_get:oraprotobuf.RowMessage.new_tuple)
  return _internal_new_tuple(index);
}
inline ::oraprotobuf::DatumMessage* RowMessage::_internal_add_new_tuple() {
  return new_tuple_.Add();
}
inline ::oraprotobuf::DatumMessage* RowMessage::add_new_tuple() {
  // @@protoc_insertion_point(field_add:oraprotobuf.RowMessage.new_tuple)
  return _internal_add_new_tuple();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oraprotobuf::DatumMessage >&
RowMessage::new_tuple() const {
  // @@protoc_insertion_point(field_list:oraprotobuf.RowMessage.new_tuple)
  return new_tuple_;
}

// repeated .oraprotobuf.DatumMessage old_tuple = 6;
inline int RowMessage::_internal_old_tuple_size() const {
  return old_tuple_.size();
}
inline int RowMessage::old_tuple_size() const {
  return _internal_old_tuple_size();
}
inline void RowMessage::clear_old_tuple() {
  old_tuple_.Clear();
}
inline ::oraprotobuf::DatumMessage* RowMessage::mutable_old_tuple(int index) {
  // @@protoc_insertion_point(field_mutable:oraprotobuf.RowMessage.old_tuple)
  return old_tuple_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oraprotobuf::DatumMessage >*
RowMessage::mutable_old_tuple() {
  // @@protoc_insertion_point(field_mutable_list:oraprotobuf.RowMessage.old_tuple)
  return &old_tuple_;
}
inline const ::oraprotobuf::DatumMessage& RowMessage::_internal_old_tuple(int index) const {
  return old_tuple_.Get(index);
}
inline const ::oraprotobuf::DatumMessage& RowMessage::old_tuple(int index) const {
  // @@protoc_insertion_point(field_get:oraprotobuf.RowMessage.old_tuple)
  return _internal_old_tuple(index);
}
inline ::oraprotobuf::DatumMessage* RowMessage::_internal_add_old_tuple() {
  return old_tuple_.Add();
}
inline ::oraprotobuf::DatumMessage* RowMessage::add_old_tuple() {
  // @@protoc_insertion_point(field_add:oraprotobuf.RowMessage.old_tuple)
  return _internal_add_old_tuple();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oraprotobuf::DatumMessage >&
RowMessage::old_tuple() const {
  // @@protoc_insertion_point(field_list:oraprotobuf.RowMessage.old_tuple)
  return old_tuple_;
}

// repeated .oraprotobuf.TypeInfo new_typeinfo = 7;
inline int RowMessage::_internal_new_typeinfo_size() const {
  return new_typeinfo_.size();
}
inline int RowMessage::new_typeinfo_size() const {
  return _internal_new_typeinfo_size();
}
inline void RowMessage::clear_new_typeinfo() {
  new_typeinfo_.Clear();
}
inline ::oraprotobuf::TypeInfo* RowMessage::mutable_new_typeinfo(int index) {
  // @@protoc_insertion_point(field_mutable:oraprotobuf.RowMessage.new_typeinfo)
  return new_typeinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oraprotobuf::TypeInfo >*
RowMessage::mutable_new_typeinfo() {
  // @@protoc_insertion_point(field_mutable_list:oraprotobuf.RowMessage.new_typeinfo)
  return &new_typeinfo_;
}
inline const ::oraprotobuf::TypeInfo& RowMessage::_internal_new_typeinfo(int index) const {
  return new_typeinfo_.Get(index);
}
inline const ::oraprotobuf::TypeInfo& RowMessage::new_typeinfo(int index) const {
  // @@protoc_insertion_point(field_get:oraprotobuf.RowMessage.new_typeinfo)
  return _internal_new_typeinfo(index);
}
inline ::oraprotobuf::TypeInfo* RowMessage::_internal_add_new_typeinfo() {
  return new_typeinfo_.Add();
}
inline ::oraprotobuf::TypeInfo* RowMessage::add_new_typeinfo() {
  // @@protoc_insertion_point(field_add:oraprotobuf.RowMessage.new_typeinfo)
  return _internal_add_new_typeinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::oraprotobuf::TypeInfo >&
RowMessage::new_typeinfo() const {
  // @@protoc_insertion_point(field_list:oraprotobuf.RowMessage.new_typeinfo)
  return new_typeinfo_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace oraprotobuf

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::oraprotobuf::Op> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::oraprotobuf::Op>() {
  return ::oraprotobuf::Op_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_OraProtoBuf_2eproto
